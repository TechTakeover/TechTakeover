Why Unix?	Apps need a home!		-Inside a laptop?		-Inside a server?UNIX servers:	-The majority of large-scale applications live on UNIX based servers!	-More stable than other O/S	-Much faster!	-More compatible with wide variety of networking technologies!	-FreeUNIX was publically released in 1973UNIX is divided in to three main branches.Most popular UNIX versions:1.)	Linux2.)	Darwin**UNIX CAT COMMAND: Output contents of file to terminalCommon Traits amongst UNIX variants:1.)	Data as plaintext files2.)	Nested Subdirectories3.)	Many small programs (w/o this, a nightmare to maintain. Huge Size)a.	Easier to compartmentalize and modify specific programs/components4.)	Input-Output Redirectiona.	Input can come from something other than keyboard/mouse and output can go to someplace other than screen**Combined, these traits make up the UNIX PHILOSOPHY!UNIX Kernel: Just a program1.)	One very special job: To manage the computer’s hardware!a.	Acts as a delegator/gate keeper/intermediary between external programs and hardware (CPU, Memory, Devices(I/O devices))2.)	Safe from Hackers. While program is running it is kept in a protected part of memory.UNIX Shell: Like the Kernel, it is just another program1.)	Provides a user interface to the Kernel2.)	Originally a command line user interfacea.	Next, moved to graphicalb.	Now it is multi-type (Touch, audible, etc.)-	All Shells! An interface between the Kernel and the user.-	When someone says “shell,” they are usually referring to the command line variety-	Shell prevents user from directly accessing the Kernel. The shells “sweats” the low-level details-	Different types of command line shells.PATHS!1.)	Paths that start with a slash are absolute. Those without are relative to current working directory!a.	CD Command allows you to change directories b.	Pwd command: Home directory!i.	My home:  /Users/MBellamy2.)	The root: The topmost directory of the file systema.	ls command: can be modified with command line flags1.	Ex/ ls –t shows files in order of date modified 2.	Ls –l is long format, more information about directory3.	Can combine flags in to a single lineii.	Blue colors are directoriesiii.	Pinks are links/symbolic linksiv.	Red is a runnable programv.	White is a regular fileb.	Man command: manualc.	Command for file size: ls –lhi.	** lowercase h makes output human readable!d.	Interesting flags:i.	Sort horizontally instead of vertically (-x)ii.	Show hidden folders (-a)iii.	Output the folders as comma separated values (-m)iv.	Follow all paths (subdirectories) of the current directory (-R)e.	Dealing with whitespace: \ escapes whitespace f.	ls command followed by a specific file path will display the contents of that particular fileg.	You can use the . (single dot) to signify the current directory in a pathi.	The command: “subl .” will open up the current directory in sublime text!h.	~ denotes home directory!i.	cp command copies the contents of a file to a new location!UNIX Naming Conventions:1.)	In general, UNIX power users do not use spaces in the names they give to things. Use a dash or an underscore instead!2.)	Case sensitivity: Linux is case sensitiveCutting Corners:1.) We’ve used cd to move to the root of out file system and backConcepts:1.)	Path: An address for a file system location. Either Absolute (/) or relative!2.)	Root: The location at the top of the file system that contains everything else. The top of the hierarchy!Captures History: Your shell keeps track of what you do!1.)	history command2.)	can use “history | less”  for redirection. Will take the output of history and port that output to the less command as its input. This is redirection! 3.)	Use the | (pipe) symbol to use the output of one command as the input for another command!4.)	You can save the output of history command to a file! a.	Make sure you’re in home directory, then use the redirection operator “>” to take the output from history and write it to a file!i.	history  > moving_around.txt1.	the > operator sends the output of a command on the left side to the contents of a file on the right. The > operator overwrites!2.	The >> operator APPENDS!a.	Both of these operators will create a new file if it doesn’t exist!MV command: 1.)	Can move files2.)	Can rename files