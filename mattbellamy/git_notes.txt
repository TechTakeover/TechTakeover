Version Control: 1.)	Repository:  A place where you store the history of files. A snapshot of a file system at a particular point in time. Information Contained in a Git commit:1.)	Commit ID2.)	Message3.)	Timestamp4.)	Differences (Diff)5.)	Signature (Author and email)**When using Git with Fish: A red X indicates differences in files or uncommitted files in staging area. Will change to a green check when the files are alike, and there are no uncommitted changes in the working directory.Git Philosophy:1.)	Modify2.)	Add3.)	CommitGit Labels:1.)	Every commit can have a label that points to ita.	Ex/ ‘Head’ points to the commit we’re currently looking atb.	‘master’ is the label that Git gives the very first branchc.	A ‘branch’ is just a label that points to a specific place in time. Can have divergent ‘branches’ from a common point, with each branch applying different treatments to the same source material.2.)	Make a new branch with the ‘branch’ commandWorking with Remotes:1.)	Since Git is a distributed version control system, there is no CENTRAL repository that serves as the one to rule them all.a.	Instead, you work with local repositories and remotes that they are connected to.GitHub:1.)	Provides you with a common location that anyone can access.2.)	When you “push,” you are sending the .git folder. Just the commits. a.	–u sets something up as a tracking branch!3.)	With Pull Requests, need to use master as base branch, then set the comparison branch to the branch you’ve been working on.4.)	Pull requests on GitHub are used for collaboration; git merge command is used for solo work.a.	Team project: Pull Requestb.	Solo work: git mergeMerge conflict:1.)	When two people work on the same file, and on the same line of code. Git tries to merge, but it can’t reconcile. It then injects the two versions in to the file and asks you which line you want to keep.**Delete old branches after they’ve been merged in to master!